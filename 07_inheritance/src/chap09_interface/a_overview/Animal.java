package chap09_interface.a_overview;


/*
 * 인터페이스
 * 
 * 1. 클래스들이 반드시 구현해야하는 기능의 명세(메소드의 규칙)를 정의하는 일종의 추상 자료형입니다.
 * 2. 추상화, 다형성 등의 핵심 개념으로 활용됩니다.
 * 3. 실무적으로 보면 작업지시서 역할을 수행할 수 있습니다.
 * 4. 구성 요소
 *    1) 상수 : 모든 필드는 public static final로 선언됩니다. 생략해도 자동으로 붙습니다.
 *    2) 추상 메소드 : 모든 메소드는 public abstract로 선언됩니다. 생략해도 자동으로 붙습니다.
 *    3) 디폴트 메소드 : JDK8부터 default 키워드를 추가한 본문이 있는 메소드를 정의할 수 있습니다.
 *    3) 정적 메소드 : JDK8부터 static 메소드를 정의할 수 있습니다.
 *    
 * 5. 주요 특징
 *    1) 객체(인스턴스)를 생성할 수 없습니다.
 *    2) 인터페이스는 구현(implements)합니다. 상속 받는다고 표현하지 않습니다.
 *    3) 다중 구현이 가능합니다. 2개 이상의 인터페이스를 구현할 수 있습니다.
 *    4) 다형성을 지원합니다. 인터페이스를 구현클래스 객체들의 타입으로 사용할 수 있습니다.
 *    5) 인터페이스 구현클래스들은 반드시 모든 추상 메소드를 오버라이드 해야 합니다. 
 *    
 */


/*
 * 클래스 상속과 인터페이스 구현
 * 
 *                 클래스     |     인터페이스
 *--------------------------------------------         
 * 표현        |    상속      |        구현
 * 키워드      |  extends     |     implements
 * 하위클래스  | 서브클래스	  |     구현클래스
 * 다중지원    |   불가능     |       가능 
 */



public interface Animal {
	void move();   // ---- 추상 메소드 ( public abstract 자동 추가 )
	default void eat() { // ---- 디폴트 메소드 
		System.out.println("먹습니다.");
	}
	
	static void breath() {  // ---- 정적 메소드
		System.out.println("숨쉽니다.");
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
